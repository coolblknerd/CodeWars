// JavaScript provides a built-in parseInt method.

// It can be used like this:

// parseInt("10") returns 10
// parseInt("10 apples") also returns 10
// We would like it to return "NaN" (as a string) for the second case because the input string is not a valid number.

// You are asked to write a myParseInt method with the following rules:

// It should make the conversion if the given string only contains a single integer value (and eventually spaces - including tabs, line feeds... - at both ends)
// For all other strings (including the ones representing float values), it should return NaN
// It should assume that all numbers are not signed and written in base 10

----------------------
// Original Solution
----------------------

function myParseInt(str) {
  
  if(Number(str) !== NaN && Number(str) % 1 === 0) {
    return Number(str);
  } else {
    return 'NaN';
  }
}

------------
// Notes
------------

// Had to look up the solution since my original answer kept failing 2 test.  I don't know what those test were since CodeWars wouldn't tell me so it's hard to figure out exactly what it was failing.  113 Passed, 2 Failed...What could it have been?

----------------------
// Looked Up Solution
----------------------

function myParseInt(str) {
  return /^\d+$/g.test(str.replace(/(^\s*)?(\s*$)?/g,'')) ? +str : 'NaN';
}
